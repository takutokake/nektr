rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    // Helper function to check if a user is authenticated
    function isAuthenticated() {
      return request.auth != null;
    }

    // Helper function to check if a user is an admin
    function isAdmin() {
      return request.auth.uid == 'ADMIN_UID' || 
             get(/databases/$(database)/documents/users/$(request.auth.uid)).data.isAdmin == true;
    }

    // Helper function to validate match involvement
    function isInvolvedInMatch(matchId) {
      let participants = matchId.split('_');
      return request.auth.uid == participants[0] || 
             request.auth.uid == participants[1];
    }

    // Global rule for authenticated users
    match /{document=**} {
      allow read, write: if isAuthenticated();
    }

    // Users Collection
    match /users/{userId} {
      allow read, write: if isAuthenticated() && 
                          (request.auth.uid == userId || isAdmin());

      // Notifications subcollection
      match /notifications/{notificationId} {
        allow read, update: if isAuthenticated() && request.auth.uid == userId;
      }
    }

    // Drops Collection
    match /drops/{dropId} {
      allow read: if isAuthenticated();
      
      // DropMatches subcollection
      match /dropMatches/{matchId} {
        // Allow read and update for involved participants
        allow read, update: if isAuthenticated() && 
          (
            // Check if the current user is one of the participants
            matchId.split('_').hasAny([request.auth.uid]) &&
            
            // Validate the update is only modifying participant responses
            request.resource.data.diff(resource.data).affectedKeys()
              .hasOnly(['participants', 'status', 'lastUpdated', 'totalMatches']) &&
            
            // Ensure the user is updating their own response
            request.resource.data.participants[request.auth.uid].response in ['accepted', 'declined']
          ) || 
          isAdmin();
        
        // Allow creation for authenticated users
        allow create: if isAuthenticated() && 
          (
            matchId.split('_').hasAny([request.auth.uid]) ||
            isAdmin()
          );
      }
    }

    // Matches Collection (fallback)
    match /matches/{matchId} {
      allow read, write: if isAuthenticated() && 
        (isInvolvedInMatch(matchId) || isAdmin());
    }
  }
}
